@page "/spese"
@inject ISpesaService spesaService
@inject NavigationManager navigationManager

<h3>Spese</h3>

@if (ListaMesePrev2.Count > 0)
{    <button class="btn btn-outline-success" id="export-button" @onclick="@ReportMesePrev2"><i class="fas fa-file-download"></i> 
        Esporta @CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(mesePrev2.Mese)).ToString() @mesePrev2.Anno.ToString()</button>@:&nbsp;
}

@if (ListaMesePrev1.Count > 0)
{
    <button class="btn btn-outline-success" id="export-button" @onclick="@ReportMesePrev1"><i class="fas fa-file-download"></i> 
        Esporta @CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(mesePrev1.Mese)).ToString() @mesePrev1.Anno.ToString()</button>@:&nbsp;
}

@if (ListaMeseNow.Count > 0)
{
    <button class="btn btn-outline-success" id="export-button" @onclick="@ReportMeseNow"><i class="fas fa-file-download"></i> 
        Esporta @CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(MeseNow.Mese)).ToString() @MeseNow.Anno.ToString()</button>@:&nbsp;
}

<button class="btn btn-outline-primary" id="export-button" @onclick="@NuovaSpesa">Nuova Spesa</button>

@code {

    private SpeseExtractInputModel MeseNow = new() 
    { 
        Mese = DateTime.Now.ToString("MM"), 
        Anno = DateTime.Now.ToString("yyyy") 
    };

    private SpeseExtractInputModel mesePrev1 = new() 
    { 
        Mese = DateTime.Now.AddMonths(-1).ToString("MM"), 
        Anno = DateTime.Now.AddMonths(-1).ToString("yyyy")
    };

    private SpeseExtractInputModel mesePrev2 = new() 
    { 
        Mese = DateTime.Now.AddMonths(-2).ToString("MM"), 
        Anno = DateTime.Now.AddMonths(-2).ToString("yyyy")
    };

    List<SpesaViewModel> ListaMeseNow = new();
    List<SpesaViewModel> ListaMesePrev1 = new();
    List<SpesaViewModel> ListaMesePrev2 = new();

    private bool hasError = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await Task.Delay(3000);

        try
        {
            await CheckingData();
        }
        catch (Exception)
        {
            hasError = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CheckingData()
    {
        ListaMeseNow = await spesaService.Extract(MeseNow);
        ListaMesePrev1 = await spesaService.Extract(mesePrev1);
        ListaMesePrev2 = await spesaService.Extract(mesePrev2);
    }

    public void NuovaSpesa()
    {
        navigationManager.NavigateTo("/spesa", true);
    }

    public void ReportMeseNow()
    {
        navigationManager.NavigateTo($"api/Budget/GeneraExcel/?Mese={MeseNow.Mese}&Anno={MeseNow.Anno}", true);
    }

    public void ReportMesePrev1()
    {
        navigationManager.NavigateTo($"api/Budget/GeneraExcel/?Mese={mesePrev1.Mese}&Anno={mesePrev1.Anno}", true);
    }

    public void ReportMesePrev2()
    {
        navigationManager.NavigateTo($"api/Budget/GeneraExcel/?Mese={mesePrev2.Mese}&Anno={mesePrev2.Anno}", true);
    }
}